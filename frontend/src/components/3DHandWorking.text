import React from "react";
import { Canvas } from "@react-three/fiber";
import { Sphere } from "@react-three/drei";
import * as THREE from "three";

const Hand3D = ({ handData }) => {
  if (!handData || handData.length === 0) {
    return <div style={{ color: "red" }}>No hand data available.</div>;
  }

  const fingerSegments = [
    [0, 1], [1, 2], [2, 3], [3, 4], // Thumb
    [5, 6], [6, 7], [7, 8],         // Index
    [9, 10], [10, 11], [11, 12],    // Middle
    [13, 14], [14, 15], [15, 16],   // Ring
    [17, 18], [18, 19], [19, 20],   // Pinky
  ];

  const palmConnections = [
    [0, 5], [0, 9], [0, 13], [0, 17], [5, 9], [9, 13], [13, 17],
  ];

  const generateHolographicMaterial = () =>
    new THREE.MeshPhysicalMaterial({
      color: new THREE.Color("cyan"),
      emissive: new THREE.Color("blue"),
      emissiveIntensity: 0.8,
      transparent: true,
      opacity: 0.5,
      roughness: 0.1,
      metalness: 0.8,
      transmission: 0.9, // Glass-like effect
      clearcoat: 1.0, // High shine
      clearcoatRoughness: 0.1,
    });

  return (
    <Canvas
      style={{
        width: "100%",
        height: "100vh",
      }}
      camera={{ position: [0, 0, 20], fov: 60 }}
    >
      <ambientLight intensity={0.7} />
      <pointLight position={[10, 10, 10]} />
      <group rotation={[0, Math.PI, 0]}>
        {/* Render Hand Joints */}
        {handData.map((hand, handIndex) => (
          <React.Fragment key={`hand-${handIndex}`}>
            {hand.map((landmark, idx) => (
              <Sphere
                key={`joint-${handIndex}-${idx}`}
                args={[0.2, 32, 32]} // Slightly larger spheres
                position={[
                  landmark.x * 8 - 4,
                  -landmark.y * 8 + 4,
                  -landmark.z * 8 - 2,
                ]}
                material={generateHolographicMaterial()}
              />
            ))}
          </React.Fragment>
        ))}

        {/* Render Palm Connections */}
        {handData.map((hand, handIndex) =>
          palmConnections.map(([start, end], idx) => {
            const startVector = new THREE.Vector3(
              hand[start].x * 8 - 4,
              -hand[start].y * 8 + 4,
              -hand[start].z * 8 - 2
            );
            const endVector = new THREE.Vector3(
              hand[end].x * 8 - 4,
              -hand[end].y * 8 + 4,
              -hand[end].z * 8 - 2
            );

            const midPoint = startVector.clone().add(endVector).multiplyScalar(0.5);
            const direction = new THREE.Vector3().subVectors(endVector, startVector);
            const length = direction.length();
            const orientation = new THREE.Matrix4().lookAt(
              startVector,
              endVector,
              new THREE.Vector3(0, 1, 0)
            );
            orientation.multiply(new THREE.Matrix4().makeRotationX(Math.PI / 2));

            return (
              <mesh
                key={`palm-${handIndex}-${idx}`}
                position={[midPoint.x, midPoint.y, midPoint.z]}
                rotation={new THREE.Euler().setFromRotationMatrix(orientation)}
              >
                <cylinderGeometry args={[0.1, 0.1, length, 32]} />
                <meshPhysicalMaterial {...generateHolographicMaterial()} />
              </mesh>
            );
          })
        )}

        {/* Render Finger Segments */}
        {handData.map((hand, handIndex) =>
          fingerSegments.map(([start, end], idx) => {
            const startVector = new THREE.Vector3(
              hand[start].x * 8 - 4,
              -hand[start].y * 8 + 4,
              -hand[start].z * 8 - 2
            );
            const endVector = new THREE.Vector3(
              hand[end].x * 8 - 4,
              -hand[end].y * 8 + 4,
              -hand[end].z * 8 - 2
            );

            const midPoint = startVector.clone().add(endVector).multiplyScalar(0.5);
            const direction = new THREE.Vector3().subVectors(endVector, startVector);
            const length = direction.length();
            const orientation = new THREE.Matrix4().lookAt(
              startVector,
              endVector,
              new THREE.Vector3(0, 1, 0)
            );
            orientation.multiply(new THREE.Matrix4().makeRotationX(Math.PI / 2));

            return (
              <mesh
                key={`segment-${handIndex}-${idx}`}
                position={[midPoint.x, midPoint.y, midPoint.z]}
                rotation={new THREE.Euler().setFromRotationMatrix(orientation)}
              >
                <cylinderGeometry args={[0.1, 0.1, length, 32]} />
                <meshPhysicalMaterial {...generateHolographicMaterial()} />
              </mesh>
            );
          })
        )}
      </group>
    </Canvas>
  );
};

export default Hand3D;
